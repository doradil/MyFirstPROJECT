# Coding Task  OOP

1. Create a abstract class called Shape
   * instance fields : 
     - name as String 
     - area as Decimal
   * constructor 
     - 1 param|arg constructor to set the name
   * method 
     - abstract void method calculateArea with no param (edited)

7

2

2

3

2

3

3

3

2

2. Create concrete child class of Shape - class Rectangle 
   * private instance fields : 
     - width as Decimal 
     - height as Decimal
   * constructor 
     - no param|arg constructor to set 
       - the name to Just Rectangle
       - width and height to 1
     - 3 arg constructor to set 
       - name, width ,height 
   * method 
     - implement calculateArea and calculate the area 
       - set the value of area to width*height (edited)

Akbar — Yesterday at 3:21 PM
3. Create concrete child class of Shape - class Circle 
   * instance fields : 
     - radius as Decimal 
   * constructor 
     - no param|arg constructor to set 
       - the name to Just Circle
       - radius to 1
     - 2 arg constructor to set 
       - name, radius
   * method 
     - implement calculateArea and calculate the area 
       - set the value of area to Math.PI * radius * radius

Akbar — Yesterday at 3:31 PM
4. Create a child class of Rectangle - class Square 
   * instance fields : 
     - side as Decimal 
   * constructor 
     - 2 arg constructor to set 
       - name, side
       - call parent 3 arg constructor as below
       - super(name,side,side)
[3:34 PM]
5. Create an interface called Drawable
   * abstract method draw with no param no return type
Let Rectangle , Circle implements Drawable interface
   - provide implementation for draw method
     - simply print the step to draw the shape
   - public class Rectangle extends Shapes implements Drawable{...}

Akbar — Yesterday at 3:39 PM
6. Add a non-abstract void method called displayShapeInfo to Shape class
 - Print :  The Shape is nameOfShapeHere and the area is areaValueHere

7. Create an interface called Rollable 
   * abstract void method roll 
   * Circle implements Rollable
   * 
  public class Circle extends Shapes implements Drawable,Rollable{

  }
   
 (edited)
[3:39 PM]
Finally, Create anon-apex file 
Create object of all things you can create object out of. 
Create a List of Shape add all different Shapes 
Create Drawable and assign object to it 
Call the methods and print the results